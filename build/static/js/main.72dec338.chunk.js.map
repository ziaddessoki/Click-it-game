{"version":3,"sources":["components/Navbar.js","components/Intro.js","components/Actor.js","components/Score.js","components/Modal.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["navbar","props","className","to","Intro","useState","mode","setMode","name","value","onChange","e","target","type","onClick","history","push","console","log","Actor","src","imgClicked","alt","id","Score","score","topScore","modal","title","body","loseModal","Modal","Header","closeButton","Title","Body","Footer","variant","onHide","Game","shuffle","data","temp","index","ctr","length","Math","floor","random","correctAnswer","state","newScore","NewTopScore","max","setState","wrongAnswer","resetData","modalShow","map","item","clicked","imageClicked","rightGuess","newData","person","newPerson","levelChecker","got","goal","closeModal","child","React","createRef","this","location","theOffice","friends","style","fontWeight","fontSize","key","image","shake","show","Component","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72dec338.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Navbar.css'\n\nconst navbar =(props)=>(\n    \n    <ul className=\"Navbar\">\n        <Link to=\"/\" className=\"item\"><li >Home</li></Link>\n        <Link to=\"/game\"><li className=\"item\">Game</li></Link>\n    </ul>\n    \n)\nexport default navbar;\n","import React, { useState } from 'react';\n// import { Redirect } from 'react-router-dom'\nimport './Intro.css'\n\nconst  Intro =(props)=>{\n        const[mode,setMode]= useState('theOffice');\n        const clicked=()=>{\n            let path = `/game`;\n    props.history.push(path,mode)\n            console.log(mode);\n        }\n    return(\n        <div className=\"Home\">\n            <h1>Click-it</h1>\n        <p>Click on any of the character cards. \n            They will be reshuffled and you'll have to choose another. \n            As you keep choosing unique characters, you'll gain points.\n            Choose poorly, and you'll lose.\n            Only when you surpass your goal from the previous attempt move to a harder level.</p>\n        <div>\n        <select name=\"gameMode\" value={mode} onChange={e =>setMode(e.target.value)}>\n            <option value=\"friends\">Friends - Easy</option>\n            <option value=\"theOffice\">The Office - Medium</option>\n            <option value=\"got\">Game Of Thrones - Hard</option>\n            \n        </select>\n        </div>\n        <button type='submit' onClick={clicked}>Play now</button>\n        </div>\n    );\n    \n} \n\n\n    \n\nexport default Intro;","import React from 'react';\nimport './Actor.css'\n\nexport default function Actor(props) {\n    return (\n        \n        <img src={props.src} \n        // className={`Actor${props.shake?'shake':\"\"}`} \nclassName=\"Actor\"\n        onClick={props.imgClicked}\n         alt={`actor${props.id}`}/>\n        \n    )\n};\n\n","import React from 'react'\nimport './Score.css'\n\nfunction Score(props) {\n    return (\n        <div >\n            <p className=\"Score\">Score: {props.score} <br/> Top Score: {props.topScore}</p>\n        </div>\n    )\n}\n\nexport default Score\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport './Modal.css';\n\n\n\n\n\nfunction modal(props) {\n\n  let title = \"Good Job!!\";\n  let body = \"Woohoo, you've made it to the next level.\"\n\n  if (props.loseModal){\n    title = 'You Suck!!';\n    body = \"Better luck next time!!\"\n  }\n    return (\n        \n      <div >\n        <Modal  {...props}>\n          <Modal.Header closeButton>\n            <Modal.Title>{title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{body}</Modal.Body>\n          <Modal.Footer>\n            <button variant=\"secondary\" onClick={props.onHide}>\n              Close\n            </button>\n            \n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n  \n//   render(<Model />);\n\n  export default modal;","import React from 'react';\nimport './Game.css';\nimport Actor from './Actor';\nimport theOffice from '../assets/theOffice.json'\nimport friends from '../assets/friends.json';\nimport got from '../assets/got.json';\nimport Score from './Score';\nimport Modal from './Modal'\n\nclass Game extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.child = React.createRef();\n    this.state= { \n      data: [],\n      score : 0,\n      topScore: 0,\n      goal:0,\n      mode:\"\",\n      modalShow:false,\n      loseModal: false\n      \n    }\n}\n\n  componentDidMount() {\n    if(this.props.location.state=== \"theOffice\"){\n      this.setState({ data: this.shuffle(theOffice),mode:\"THE OFFICE\", goal:130 })\n    }\n    else if(this.props.location.state=== \"friends\") {\n      this.setState({ data: this.shuffle(friends),mode: \"Friends\", goal:60 })\n    }else{\n      this.setState({ data: this.shuffle(got),mode: \"Game of Thrones\", goal:310 })\n    }\n    ;\n  }\n\n\n  shuffle=(data) =>{\n    let ctr = data.length, temp, index;\n// While there are elements in the array\n    while (ctr > 0) {\n// Pick a random index\n        index = Math.floor(Math.random() * ctr);\n// Decrease ctr by 1\n        ctr--;\n// And swap the last element with it\n        temp = data[ctr];\n        data[ctr] = data[index];\n        data[index] = temp;\n    }\n    return data;\n  }\n  correctAnswer = data =>{\n    const{ score,topScore } = this.state\n    const newScore = score + 10\n    const NewTopScore = Math.max(newScore,topScore)\n    \n\n    this.setState({\n      data:this.shuffle(data),\n      score: newScore,\n      topScore: NewTopScore\n    })\n  }\n\n  wrongAnswer = data =>{\n    this.setState({\n      score:0,\n      data: this.resetData(data),\n      modalShow:true,\n      loseModal:true,\n\n    })\n  }\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffle(resetData);\n  };\n\n\n   imageClicked = (id) =>{\n    let rightGuess = false;\n    console.log(id)\n    const newData = this.state.data.map( person =>{\n    const newPerson ={...person};\n      if(newPerson.id === id){\n        console.log(newPerson.id)\n        if (!newPerson.clicked){\n          rightGuess = true;\n          newPerson.clicked= true;\n        }\n      }\n      return newPerson;\n      \n    })\n    rightGuess ? this.correctAnswer(newData) : this.wrongAnswer(newData);\n  }\n  \n  levelChecker=()=>{\n    // test\n    if(this.state.score=== 30){\n      this.setState({ data: this.shuffle(got),mode:\"Game of Thrones\", goal:310,score:0, modalShow: true });\n    }\n    // if(this.state.score===60 && this.state.mode ===\"Friends\"){\n    //   this.setState({ data: this.shuffle(theOffice),mode:\"THE OFFICE\", goal:130,score:0, modalShow: true });   \n    // }\n    // else if(this.state.score===130 && this.state.mode ===\"THE OFFICE\"){\n    //   this.setState({ data: this.shuffle(got),mode:\"Game of Thrones\", goal:310,score:0, modalShow: true }); \n    // }\n  }\n\n  closeModal = ()=>{\n    this.setState({modalShow:false,loseModal:false})\n  }\n    \n\n    render() {\n       if(this.state.score===60 && this.state.mode ===\"Friends\"){\n      this.setState({ data: this.shuffle(theOffice),mode:\"THE OFFICE\", goal:130,score:0, modalShow: true });   \n    }\n    else if(this.state.score===130 && this.state.mode ===\"THE OFFICE\"){\n      this.setState({ data: this.shuffle(got),mode:\"Game of Thrones\", goal:310,score:0, modalShow: true }); \n    }\n      return (\n        <div >\n          <p className=\"Title\">{this.state.mode} <br/> <span style={{fontWeight:200, fontSize:'25px'}}>Goal:{this.state.goal}</span></p>\n          <Score score={this.state.score} topScore={this.state.topScore}></Score>\n          <div className=\"Game\">\n             {this.state.data.map(person =>(\n                <Actor key={person.id} src={person.image}\n                shake={!this.state.score && this.state.topScore}\n                imgClicked={() =>{this.imageClicked(person.id)}}></Actor>\n              ))}\n          </div>\n          \n          <Modal show={this.state.modalShow} onHide={this.closeModal} loseModal={this.state.loseModal}/>\n          \n          </div>\n      )\n    }\n  }\n\nexport default Game;  ","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Intro from './components/Intro'\nimport Game from './components/Game'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      \n      <Navbar/>\n      <Switch>\n      <Route path=\"/\" exact component={Intro}/>\n      <Route path=\"/game\" component={Game}/>\n      <Redirect to=\"/\"/>\n      </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}